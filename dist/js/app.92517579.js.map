{"version":3,"file":"js/app.92517579.js","sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/_react@16.14.0@react/index.js from dll-reference _dll_vendor","webpack:///delegated ./node_modules/_prop-types@15.7.2@prop-types/index.js from dll-reference _dll_vendor","webpack:///delegated ./node_modules/_object-assign@4.1.1@object-assign/index.js from dll-reference _dll_vendor","webpack:///./src/assets/css/app.less","webpack:///./node_modules/_@alife_next-moment@0.1.11@@alife/next-moment/lib/locale sync ^\\.\\/.*$","webpack:///external \"_dll_vendor\"","webpack:///delegated ./node_modules/_webpack@4.46.0@webpack/buildin/global.js from dll-reference _dll_vendor","webpack:///delegated ./node_modules/_redux@4.1.0@redux/es/redux.js from dll-reference _dll_vendor","webpack:///./src/components/deviceTypeNodes/style.less","webpack:///./src/components/dragSource.js","webpack:///./src/components/connectDragSource.js","webpack:///./src/components/datas/customMetricItems.js","webpack:///./src/components/deviceTypeNodes/index.jsx","webpack:///./src/components/target.jsx","webpack:///./src/components/connectDropTarget.js","webpack:///./src/components/arithmetic.js","webpack:///./src/components/relations.js","webpack:///./src/components/logic.js","webpack:///./src/components/container.jsx","webpack:///./src/components/contentEditable.jsx","webpack:///./src/components/baseExp.js","webpack:///./src/components/datas/deviceTypeList.js","webpack:///./src/components/utils.js","webpack:///./src/components/monitorItemExpression/index.js","webpack:///./src/components/parse.js","webpack:///./src/pages/home/Home.jsx","webpack:///./src/pages/App.js","webpack:///./src/index.js","webpack:///delegated ./node_modules/_react-dom@16.14.0@react-dom/index.js from dll-reference _dll_vendor"],"sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([647,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = (__webpack_require__(33))(0);","module.exports = (__webpack_require__(33))(10);","module.exports = (__webpack_require__(33))(28);","// extracted by mini-css-extract-plugin","var map = {\n\t\"./ar\": 154,\n\t\"./ar.js\": 154,\n\t\"./de\": 155,\n\t\"./de.js\": 155,\n\t\"./es\": 156,\n\t\"./es.js\": 156,\n\t\"./fr\": 157,\n\t\"./fr.js\": 157,\n\t\"./hi\": 158,\n\t\"./hi.js\": 158,\n\t\"./it\": 159,\n\t\"./it.js\": 159,\n\t\"./ja\": 160,\n\t\"./ja.js\": 160,\n\t\"./ko\": 161,\n\t\"./ko.js\": 161,\n\t\"./pt\": 162,\n\t\"./pt.js\": 162,\n\t\"./ru\": 163,\n\t\"./ru.js\": 163,\n\t\"./zh-cn\": 164,\n\t\"./zh-cn.js\": 164,\n\t\"./zh-hk\": 165,\n\t\"./zh-hk.js\": 165,\n\t\"./zh-tw\": 166,\n\t\"./zh-tw.js\": 166\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 299;","module.exports = _dll_vendor;","module.exports = (__webpack_require__(33))(50);","module.exports = (__webpack_require__(33))(53);","// extracted by mini-css-extract-plugin","import React, { Component } from 'react'\n\nexport default class Source extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    const { isDragging, connectDragSource, children } = this.props;\n    const opacity = isDragging ? 0.25 : 1;\n    return connectDragSource(<span style={{ opacity, cursor: 'move', display: 'inline-block' }}>{children}</span>)\n  }\n}","import { DragSource } from 'react-dnd'\n\nconst source = {\n  beginDrag(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n    const html = component.props && component.props.html;\n    const value = component.props && component.props.value;\n    return {\n      ...props,\n      html,\n      value,\n    }\n  }\n}\n\nexport default (Component, type) => DragSource(type || 'aisc', source, (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  }\n})(Component)","\nexport const customMetricItems = [\n  {\n    'name': '自定义指标',\n    data: [\n      {\n        \"name\": \"湿度\",\n        \"data\": [\n          {\n            \"pointTypeCode\": \"1002\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试温度1 1002\",\n            \"linkable\": true,\n            \"customName\": \"测试温度1\",\n            \"customId\": \"60002_1002\",\n          },\n          {\n            \"pointTypeCode\": \"1003\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试温度2 1003\",\n            \"linkable\": true,\n            \"customName\": \"测试温度2\",\n            \"customId\": \"60002_1003\",\n          },\n          {\n            \"pointTypeCode\": \"1004\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试温度3 1004\",\n            \"linkable\": true,\n            \"customName\": \"测试温度3\",\n            \"customId\": \"60002_1004\",\n          },\n          {\n            \"pointTypeCode\": \"1005\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试温度4 1005\",\n            \"linkable\": true,\n            \"customName\": \"测试温度4\",\n            \"customId\": \"60002_1005\",\n          },\n        ],\n        \"deviceType\": \"60002\"\n      },\n      {\n        \"name\": \"湿度22\",\n        \"data\": [\n          {\n            \"pointTypeCode\": \"1002\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试湿度1 1002\",\n            \"linkable\": true,\n            \"customName\": \"测试湿度1\",\n            \"customId\": \"60002_1002\",\n          },\n          {\n            \"pointTypeCode\": \"1003\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试湿度2 1003\",\n            \"linkable\": true,\n            \"customName\": \"测试湿度2\",\n            \"customId\": \"60002_1003\",\n          },\n          {\n            \"pointTypeCode\": \"1004\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试湿度3 1004\",\n            \"linkable\": true,\n            \"customName\": \"测试湿度3\",\n            \"customId\": \"60002_1004\",\n          },\n          {\n            \"pointTypeCode\": \"1005\",\n            \"deviceTypeName\": \"湿度\",\n            \"deviceTypeCode\": \"60002\",\n            \"isLabel\": true,\n            \"name\": \"测试湿度4 1005\",\n            \"linkable\": true,\n            \"customName\": \"测试湿度4\",\n            \"customId\": \"60002_1005\",\n          },\n        ],\n        \"deviceType\": \"60002\"\n      },\n    ]\n  }\n];","import React from 'react';\nimport { Tree, Search } from '@alife/aisc';\nimport _ from 'lodash';\nimport DragSource from '../dragSource';\nimport ConnectDragSource from '../connectDragSource';\nimport { customMetricItems } from '@components/datas/customMetricItems';\n\nconsole.log('----customMetricItems----', customMetricItems);\n\nimport './style.less';\n\nfunction TreeNodeTag(props) {\n  let { children, linkable } = props\n  return <div className={`label${linkable ? ' active' : ''}`}>{children}</div>\n}\n\nconst isNull = val => val === '' || val === undefined || val === null\n\nexport default class MonitorTree extends React.PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      scrollTop: document.scrollingElement.scrollTop,\n      searchKey: '',\n      dataSource: [],\n    }\n  }\n  componentDidMount() {\n    // 模拟ajax请求\n    setTimeout(() => {\n      this.setState({\n        dataSource: customMetricItems,\n      });\n    }, 0);\n  }\n  loop = obj => {\n    const { sourceName, deviceType, subjectType, fromIt } = this.props\n    const { searchKey, expandedKeys } = this.state\n    const Source = ConnectDragSource(DragSource, sourceName);\n    return (...args) => {\n      return obj.data && obj.data.length && obj.data.filter(o => {\n        if (!o.linkable) {\n          return true\n        }\n        let subjectFilterValue = true\n        if (o.linkable && !isNull(subjectType)) {\n          if (o.subjectType != subjectType) {\n            subjectFilterValue = false\n          }\n        }\n        if (o.linkable && !isNull(fromIt)) {\n          return subjectFilterValue && new RegExp(searchKey, 'gi').test(o.search)\n        }\n      }).map((o, i) => {\n        let key = args.concat(i).join('-')\n        let linkable = o.linkable;\n        let child = <TreeNodeTag key={key} value={o.value} linkable={linkable}>{o.name}</TreeNodeTag>\n        if (!o.linkable) {\n          // 默认不展开全部，因为三层的数据量大 会造成长时间的浏览器卡死\n          this.defaultExpandedKeys =\n            !searchKey && !deviceType ? [] : deviceType ?\n              this.defaultExpandedKeys.concat(key) : this.defaultExpandedKeys.concat(new RegExp(searchKey).test(o.name) ?\n                '' : key).filter(Boolean)\n          // this.defaultExpandedKeys = this.defaultExpandedKeys.filter(o => o.split('-').length < 3)\n          this.defaultExpandedKeys = Array.isArray(expandedKeys) ? expandedKeys : _.uniq(this.defaultExpandedKeys).filter(o => {\n            if (deviceType) return true\n            if (o.split('-').length === 3) {\n              const childrenKeys = this.defaultExpandedKeys.filter(o => o.split('-').length > 3)\n              return childrenKeys.some(_o => new RegExp(o).test(_o))\n            }\n            return true\n          })\n        }\n        let label = o.linkable? <Source value={o} key={key}>{child}</Source>: child\n        return <Tree.Node name={o.name} isSubType={o.isSubType} key={key} title={label}>{\n          o.data && o.data.length > 0 ? this.loop(o).apply(this, args.concat(i)) : ''\n        }</Tree.Node>\n      })\n    }\n  }\n  formatTree = dataSource => {\n    let children = dataSource.map((o, i) =>{\n      return this.loop(o)(i) && this.loop(o)(i).filter(o =>\n        o.props.isSubType ?\n          o.props.children.some(_o => _o.props.children.length)\n          :\n          o.props.children.length > 0\n      )\n   });\n    const {searchKey} = this.state\n    if (searchKey) {\n      _.flatten(children).forEach(o => {\n        if(o){\n           if (!o.props.isSubType) return\n           if (new RegExp(searchKey).test(o.props.name)) return\n        o.props.children.forEach((_o, i) => {\n          if (!_o.props.children.length && !new RegExp(searchKey).test(_o.props.name)) {\n            o.props.children[i] = null\n          }\n        })\n        }\n      })\n    }\n\n    if (children.length === 0) return\n    //注释掉以前的默认进来箭头展开\n    // return <Tree onExpand={this.setExpandedKeys} expandedKeys={this.defaultExpandedKeys} showLine>\n    //   {children}\n    // </Tree>\n    return <Tree onExpand={this.setExpandedKeys} showLine>\n      {children}\n    </Tree>\n  }\n  setExpandedKeys = expandedKeys => {\n    this.setState({\n      expandedKeys\n    })\n  }\n  getExpandKeys = children => {\n    return _.flatten(children.map(child => {\n      if (child.props.children.length) return this.getExpandKeys(child.props.children)\n      return { name: child.props.name, key: child.key }\n    }))\n  }\n\n  onSearch = (v) => {\n    // console.log(v)\n    this.willUpdateState = true\n    this.setState({\n      searchKey: v.key,\n      expandedKeys: void 0,\n    })\n  }\n\n  render() {\n    this.defaultExpandedKeys = []\n    let { dataSource } = this.state;\n\n    return <div ref={ref => this.container = ref} className=\"device-type-nodes\" style={{ top }}>\n      <div className=\"flex column\" title={'指标查询'} style={{ color: '#fff' }}>\n        <Search onSearch={this.onSearch} style={{ marginBottom: 12, width: '100%' }} />\n        {\n          this.state.searchKey === ''\n            ? this.formatTree([{\n              name: '0-1',\n              data: dataSource\n            }])\n            : this.formatTree(dataSource)\n        }\n      </div>\n    </div>\n  }\n}","import React, { PureComponent } from 'react';\n\nconst Clone = function (obj, options) {\n  if (obj !== void (0) && obj.$$typeof === Symbol.for('react.element')) {\n    return React.cloneElement(obj,\n      { ...options }\n    )\n  }\n  return obj;\n};\n\nexport default class Target extends PureComponent {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    const {\n      canDrop, isOver, connectDropTarget, children,\n      className = '', onChange = e => e\n    } = this.props;\n    const border = canDrop && isOver ? '1px solid #2e85ff' : ''\n    const transition = '0.3s border';\n    console.log('----children----', children);\n    return connectDropTarget(<span className={`${canDrop && isOver ? 'hover ' : ''}${className}`}>\n      {\n        Clone(children, {\n          style: { border, transition, ...children.props.style }\n        })\n      }\n    </span>)\n  }\n}","import React from 'react';\nimport {\n  DropTarget,s\n} from 'react-dnd';\n\nconst boxTarget = {\n  drop: (props, monitor, component) => {\n    if (!component) {\n      return\n    }\n    let children = props.children;\n    if (Array.isArray(children)) {\n      throw 'You should pass a single node for the chidlren'\n    }\n    if (props.exchange) {\n      let hoverIndex = props.index\n      let targetIndex = monitor.getItem().index\n      if (hoverIndex !== targetIndex) {\n        let onChange = children.props.onChange\n        onChange(hoverIndex, targetIndex, component)\n      }\n      return\n    }\n    if (!component.props.isOverCurrent) return\n    let onChange = children.props.onChange;\n    const index = children.props.index || 0;\n    const subIndex = children.props.subIndex || 0;\n    onChange ? onChange(monitor.getItem().value, component, undefined, undefined, index, subIndex) : null\n  },\n  hover: (props, monitor, component) => {\n    if (!component) {\n      return null\n    }\n    window.isChildOver = false\n    if (component.props.isOver && component.props.isChild) {\n      window.isChildOver = true\n    }\n    if (props.hover) props.hover(props, monitor, component)\n  },\n  canDrop: (props, monitor) => {\n    let { allow } = props\n    if (!allow) return true\n    let component = monitor.getItem()\n    if (allow(component)) {\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nexport default (Component, type) => DropTarget(type || 'aisc', boxTarget, (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop()\n  }\n})(Component);","import React, { Component } from 'react';\nimport { Card, Button } from '@alife/aisc';\nimport Source from '@components/dragSource';\nimport ConnectDragSource from '@components/connectDragSource';\n\nconst dragSource = canDropIn => ConnectDragSource(Source, canDropIn);\nconst DragSource = dragSource('root');\nconst BlankDragSource = dragSource('blank');\nconst TextDragSource = dragSource('text');\n\nexport const regularExp = symbol => {\n  return {\n    value: (left, right) => {\n      return `${left ? `R$x` : ''}${symbol}${right ? `R$x` : ''}`\n    },\n    type: 'arithExp'\n  }\n}\n\nexport const bracketsExp = () => {\n  return {\n    value: () => `(BLANK$)`,\n    type: 'bracketsExp'\n  }\n}\n\nexport const textExp = () => {\n  return {\n    value: () => `TEXT$`,\n    type: 'text'\n  }\n}\n\nexport default class Arithmetric extends Component {\n  render() {\n    return <Card title={\"算术表达式\"}>\n      <DragSource value={regularExp('+')}>\n        <Button size=\"small\" type=\"primary\">+</Button>\n      </DragSource>\n      <DragSource value={regularExp('-')}>\n        <Button size=\"small\" type=\"primary\">-</Button>\n      </DragSource>\n      <DragSource value={regularExp('*')}>\n        <Button size=\"small\" type=\"primary\">*</Button>\n      </DragSource>\n      <DragSource value={regularExp('/')}>\n        <Button size=\"small\" type=\"primary\">/</Button>\n      </DragSource>\n      <BlankDragSource value={bracketsExp()}>\n        <Button size=\"small\" type=\"primary\"><span>()</span></Button>\n      </BlankDragSource>\n      <TextDragSource value={textExp()}>\n        <Button size=\"small\" type=\"primary\"><span>number</span></Button>\n      </TextDragSource>\n    </Card>\n  }\n}","import React, { Component } from 'react';\nimport { Card, Button } from '@alife/aisc';\nimport Source from '@components/dragSource';\nimport ConnectDragSource from '@components/connectDragSource';\n\nconst dragSource = canDropIn => ConnectDragSource(Source, canDropIn)\nconst DragSource = dragSource('root');\n\nexport const relationExp = symbol => {\n  return {\n    value: (left, right) => {\n      return `${left ? `R$x` : ''}${symbol}${right ? `R$x` : ''}`\n    },\n    type: 'relationExp'\n  }\n}\n\nexport default class Relation extends Component {\n  render() {\n    return <Card title=\"关系表达式\">\n      <DragSource value={relationExp('==')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"==\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('!=')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"!=\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('>=')}>\n        <Button size=\"small\" type=\"primary\"><span>{\">=\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('<=')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"<=\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('>')}>\n        <Button size=\"small\" type=\"primary\"><span>{\">\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('<')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"<\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('&&')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"&&\"}</span></Button>\n      </DragSource>\n      <DragSource value={relationExp('||')}>\n        <Button size=\"small\" type=\"primary\"><span>{\"||\"}</span></Button>\n      </DragSource>\n    </Card>\n  }\n}","import React, { Component } from 'react'\nimport { Card, Button } from '@alife/aisc';\nimport Source from '@components/dragSource';\nimport ConnectDragSource from '@components/connectDragSource';\n\nconst dragSource = canDropIn => ConnectDragSource(Source, canDropIn)\nconst RegDragSource = dragSource('root')\n\nexport const regularExp = symbol => {\n  return {\n    value: () => `${symbol}(L$${symbol})`,\n    type: 'logicExp'\n  }\n}\n\nexport default class Logic extends Component {\n  render() {\n    return <Card title=\"逻辑表达式\">\n      <RegDragSource value={regularExp('sum')}>\n        <Button size=\"small\" type=\"primary\"><span>sum</span></Button>\n      </RegDragSource>\n      <RegDragSource value={regularExp('avg')}>\n        <Button size=\"small\" type=\"primary\"><span>avg</span></Button>\n      </RegDragSource>\n      <RegDragSource value={regularExp('max')}>\n        <Button size=\"small\" type=\"primary\"><span>max</span></Button>\n      </RegDragSource>\n      <RegDragSource value={regularExp('min')}>\n        <Button size=\"small\" type=\"primary\"><span>min</span></Button>\n      </RegDragSource>\n      <RegDragSource value={regularExp('count')}>\n        <Button size=\"small\" type=\"primary\"><span>count</span></Button>\n      </RegDragSource>\n    </Card>\n  }\n}\n","import React, { Component } from 'react'\nimport { Icon } from '@alife/aisc';\n\nexport default class Container extends Component {\n  handleClear = () => {\n    this.props.onClear()\n  }\n  render() {\n    const { style, placeholder, hasClear, className = '', onChange, value, origin, disabled } = this.props\n    return <label data-v={origin} className={`${className}${hasClear ? ' clear' : ''}${disabled ? ' disabled' : ''}`} style={{ ...style, position: 'relative' }}>\n        <span placeholder={placeholder}>{value}</span>\n        {\n          !disabled && hasClear ? <Icon type=\"delete-filling\" onClick={this.handleClear} className=\"clear-icon\" /> : ''\n        }\n      </label>\n  }\n}","import React, { Component } from 'react'\n\nconst NUMBER_REG = /^([0-9]{1,}[.]?[0-9]*)$/\n\nclass ContentEditable extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      value: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.isBlur = true;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (this.willUpdate || nextProps.content !== this.props.content) {\n      this.didUpdate = true\n      return true\n    }\n    return false\n  }\n\n  componentDidUpdate() {\n    if (this.didUpdate) {\n      if (!this.isBlur && this.element) {\n        setTimeout(() => {\n          this.setFocus()\n          this.setCaret()\n        })\n      }\n      this.didUpdate = false\n    }\n  }\n\n  setFocus = () => {\n    this.element.textContent = this.props.content\n    this.element.focus()\n  }\n\n  setCaret = () => {\n    if (this.element) {\n      var range = document.createRange()\n      var sel = window.getSelection()\n      var value = this.element.textContent\n      if (value === \"\") {\n        range.setStart(this.element, 0)\n      } else {\n        range.setStart(this.element.firstChild, this.cursorOffset)\n      }\n      range.collapse(true)\n      sel.removeAllRanges()\n      sel.addRange(range)\n    }\n  }\n\n  onChange = type => ev => {\n    const { onChange = e => e } = this.props\n    this.isBlur = false\n    this.willUpdate = true\n    const rawValue = this.element.innerText\n    this.cursorOffset = document.getSelection().anchorOffset\n    if (rawValue === \"\") {\n      onChange(ev, rawValue)\n      return\n    }\n    switch (type) {\n      case 'number':\n        if (NUMBER_REG.test(rawValue)) {\n          onChange(ev, rawValue)\n          return\n        }\n        this.cursorOffset -= (rawValue.length - this.props.content.length)\n        onChange(ev, this.props.content)\n        return\n      default:\n        if (this.state.value !== rawValue) {\n          onChange(ev, rawValue)\n        }\n    }\n  }\n\n  onPaste = ev => {\n    const value = this.element.innerText\n    this.cursorOffset = document.getSelection().anchorOffset + (value.length - this.state.value.length)\n    this.props.onPaste(ev)\n  }\n\n  onBlur = ev => {\n    const { content } = this.props\n    this.isBlur = true\n    this.cursorOffset = content && content.length\n    if (this.props.onBlur) {\n      this.props.onBlur(ev, this.element.innerText)\n    }\n  }\n\n  onFocus = ev => {\n    this.isBlur = false\n  }\n\n  render() {\n    const { content, className, style, type, placeholder } = this.props;\n    return (\n      <div\n        ref={ref => this.element = ref}\n        className={className}\n        style={{ whiteSpace: 'pre-wrap', style, borderRadius: 2 }}\n        contentEditable={true}\n        onBlur={this.onBlur}\n        onInput={this.onChange(type)}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        placeholder={placeholder}\n      >{content}</div>\n    )\n  }\n}\n\nexport default ContentEditable;","\nimport React, { Component } from 'react';\nimport Target from '@components/target';\nimport ConnectDropTarget from '@components/connectDropTarget';\nimport Container from '@components/container';\nimport ContentEditable from '@components/contentEditable';\nimport { Balloon } from '@alife/aisc';\nimport _, { endsWith } from 'lodash';\n\nconst DropTarget = function (props) {\n  // primaryKey 用来关联可拖拽项，丢失可导致无法推拽的问题\n  let P = ConnectDropTarget(Target, props.primaryKey)\n  return <P {...props}>{props.children}</P>\n}\n\nexport default class BaseExp extends Component {\n  constructor(props) {\n    super(props)\n  }\n  handleChange = (start, end) => (val, component) => {\n    const { index, subIndex } = this.props;\n    this.props.onChange(val, component, start, end, index, subIndex)\n  }\n  handleTextChange = (start, end) => (e, val) => {\n    const { index, subIndex } = this.props;\n    this.props.onChange(val, null, start, end, index, subIndex)\n  }\n  removeItem(item, value, parentIndex, subIndex) {\n    const chars = ['+', '-', '*', '/', '==', '!=', '>=', '<=', '>', '<', '&&', '||'];\n    const logicArrs = ['sum', 'avg', 'max', 'min', 'count', 'R$x', 'A$x', 'LABEL'];\n    const logicChars = ['sum', 'avg', 'max', 'min', 'count']; \n    const curValue = item.value;\n    const { start, end } = item;\n    const { tokens } = value;\n\n    /*\n     * 重新设置tokens中的start和end的值\n     * 当删除元素后，需要重新设置 start 和 end 的值\n     * 解决方法: 遍历数组。如果是 null值，如果是的话，那么start 和 end 值相差1，\n     * 否则的话，那么end的长度就等于 start 的长度 + value.length;\n    */\n   const setStartAndEndValue = function () {\n    if (tokens.length > 0) {\n      for (let i = 0; i < tokens.length; i++) {\n        const { value } = tokens[i];\n        if (i === 0) {\n          if (value === null) {\n            tokens[0].start = 0;\n            tokens[0].end = 1;\n          } else {\n            tokens[0].start = 0;\n            tokens[0].end = tokens[0].start + tokens[0].value.length;\n          }\n        } else {\n          // 如果不是第一个元素，\n          // 如果值是null\n          if (value === null) {\n            // 1. 获取该元素的上一个元素的end值当作该元素的start值\n            // 2. end 值 在当前元素的start值加1\n            const prevIndex = i - 1;\n            tokens[i].start = tokens[prevIndex].end;\n            tokens[i].end = tokens[i].start + 1;\n          } else {\n            // 如果值不等于null的话\n            // 1. 获取该元素的上一个元素的end值当作该元素的start值\n            // 2. end 值 在当前元素的start值 + 当前字符串的长度\n            const prevIndex = i - 1;\n            tokens[i].start = tokens[prevIndex].end;\n            tokens[i].end = tokens[i].start + tokens[i].value.length;\n          }\n        }\n      }\n    }\n   };\n   // 从当前被删除元素开始查找上一个运算符的位置\n   const getPrevCharPos = function(curElemIndex) {\n     const { value } = tokens[curElemIndex];\n     if (chars.indexOf(value) > -1) {\n       return curElemIndex;\n     }\n     if (curElemIndex - 1 >= 0) {\n       return getPrevCharPos(curElemIndex - 1);\n     }\n     return -1;\n   };\n   // 获取下一个运算符的位置\n   const getNextCharPos = function(curElemIndex) {\n     const { value } = tokens[curElemIndex];\n     if (chars.indexOf(value) > -1) {\n       return curElemIndex;\n     }\n     if (curElemIndex < tokens.length -1) {\n       return getNextCharPos(curElemIndex + 1);\n     }\n     return -1;\n   };\n    /*\n     * 获取左括号的索引\n     * 首先在当前元素位置下，使用递归方式，依次向上逐个元素查找是否有 左括号，如果有的话，返回左括号所在位置，否则返回-1\n    */\n    const getLeftParenthesisIndex = function(curElemIndex) {\n      /*\n       * 判断当前的值是否是左边小括号，判断规则：1) 判断该值是否等于null，且 该项的end值 - start 值 是否等于1，2）判断该项 type.label = '('\n       * 除了上面条件以外，还需要考虑逻辑运算符的存在，比如上个运算符是否有 sum()/avg()/max()/min()/count() 这些外\n       */\n      const func = function(curElemIndex) {\n        const { value, start, end, type } = tokens[curElemIndex];\n        if (value === null && (end - start === 1) && (type.label === '(')) {\n          // 还需要过滤掉 逻辑运算符的左边小括号\n          let flag = false;\n          if (curElemIndex - 1 >= 0) {\n            const { value } = tokens[curElemIndex - 1];\n            flag = (value === 'sum') || (value === 'max') || (value === 'min') || (value === 'count') || (value === 'avg') ? true : false;\n          }\n          if (!flag) {\n            return curElemIndex;\n          } else {\n            if (curElemIndex > 0) {\n              const index = curElemIndex - 1;\n              return func(index);\n            } else {\n              return -1;\n            }\n          }\n        } else {\n          if (curElemIndex > 0) {\n            const index = curElemIndex - 1;\n            return func(index);\n          } else {\n            return -1;\n          }\n        }\n      };\n      return func(curElemIndex);\n    };\n    // 获取右括号的索引\n    const getRightParenthesisIndex = function(curElemIndex) {\n      /*\n       * 除了下面这些条件外，我们还需要考虑逻辑运算符 sum()/max()/min()/avg()/count() 这些。\n      */\n      const func = function(curElemIndex) {\n        // 获取当前被删除元素的 value/start/end/type \n        const { value, start, end, type } = tokens[curElemIndex];\n        if (value === null && (end - start === 1) && (type.label === ')')) {\n          // 还需要过滤掉逻辑运算符右边的小括号\n          let flag = false;\n          if (curElemIndex - 3 > 0) { // 判断前3个元素的值是否是逻辑运算符\n            const { value } = tokens[curElemIndex - 3];\n            flag = (value === 'sum') || (value === 'max') || (value === 'min') || (value === 'count') || (value === 'avg') ? true : false;\n          }\n          if (!flag) {\n            return curElemIndex;\n          } else {\n            if (curElemIndex < tokens.length - 1) {\n              const index = curElemIndex + 1;\n              return func(index);\n            } else {\n              return -1;\n            }\n          }\n        }\n        if (curElemIndex < tokens.length - 1) {\n          const index = curElemIndex + 1;\n          return func(index);\n        } else {\n          return -1;\n        }\n      };\n      return func(curElemIndex);\n    };\n    /**\n     * 是否有运算符\n     * @param { index } curElemIndex 当前被删除元素的索引 \n     * @param { String } dir 方向，代表是向上查找 还是 向下查找\n     */\n    const isHasChar = function(curElemIndex, newArrs, dir) {\n      console.log('----newArrs----', newArrs);\n      console.log('------curElemIndex----', curElemIndex);\n      if (curElemIndex > newArrs.length - 1) {\n        return false;\n      }\n      const { value } = newArrs[curElemIndex];\n      if (chars.indexOf(value) > -1) {\n        return true;\n      }\n      if (dir === 'prev' && (curElemIndex === 0)) {\n        return false;\n      }\n      if (dir === 'next' && (curElemIndex === newArrs.length -1)) {\n        return false;\n      }\n      if (dir === 'prev' && (curElemIndex > 0)) {  // 向上查找---使用递归方式\n        return isHasChar(curElemIndex - 1, newArrs, dir);\n      } else {\n        if (curElemIndex < newArrs.length - 1) {\n          return isHasChar(curElemIndex + 1, newArrs, dir);\n        }\n      }\n      return false;\n    };\n    /**\n     * 判断当前被删除元素中的左边括号是否和右边括号是否相同。((max(___)) - (min(___))) 这样的\n     * 1）获取上/下一个运算符的的索引位置，向下/向上递归，获取左括号/右括号的数量\n     * 2）判断两者是否相等\n     * @param { Number } curElemIndex 当前被删除元素的索引\n     * @param { String } dir 当前的方向。如果 dir === 'prev' 是从上逐渐遍历搜索，dir === 'next' 是从下逐渐遍历搜索\n     * @return { Object } { leftCount, rightCount } 左括号的数量 / 右括号的数量\n    */\n    const getLeftAndRightCount = function(curElemIndex, dir) {\n      \n      let leftCount = 0; // 左边括号的数量\n      let rightCount = 0; // 右边括号的数量\n\n      // 使用递归的方式 向上/向下查找\n      const func = function(curElemIndex, dir) {\n        const { value, start, end, type } = tokens[curElemIndex];\n\n        if (value === null && (end - start === 1) && (type.label === ')')) {\n          let flag = false;\n          if (curElemIndex - 3 > 0) { // 判断前3个元素的值是否是逻辑运算符\n            const { value } = tokens[curElemIndex - 3];\n            flag = (value === 'sum') || (value === 'max') || (value === 'min') || (value === 'count') || (value === 'avg') ? true : false;\n          }\n          if (!flag) {\n            rightCount++;\n          }\n        }\n\n        if (value === null && (end - start === 1) && (type.label === '(')) {\n          let flag = false;\n          if (curElemIndex - 1 > 0) { // 判断前一个元素的值是否是逻辑运算符\n            const { value } = tokens[curElemIndex - 1];\n            flag = (value === 'sum') || (value === 'max') || (value === 'min') || (value === 'count') || (value === 'avg') ? true : false;\n          }\n          if (!flag) {\n            leftCount++;\n          }\n        }\n        if (dir === 'prev') {\n          if (curElemIndex > 0) {\n            const index = curElemIndex - 1;\n            return func(index, dir);\n          }\n        } else if (dir === 'next') {\n          if (curElemIndex < tokens.length - 1) {\n            const index = curElemIndex + 1;\n            return func(index, dir);\n          }\n        }\n        console.log('------leftCount-----', leftCount);\n        console.log('-------rightCount----', rightCount);\n        return {\n          leftCount,\n          rightCount\n        };\n      };\n      /*\n        ((max(__)) - (min(__))) \n        1. 如果我删除max项，因此我需要获取 下个运算符的位置，然后 往上逐渐查找 左右括号数量是否相同。\n        2. 如果我删除min项，我需要获取上个运算符的位置，然后逐渐往下查找 左右括号数量是否相同。\n      */\n      if (dir === 'prev') { // 向上查找, 应该获取下一个运算符的索引，从下一个运算符的位置开始逐渐向上递归查找\n        const nextCharIndex = getNextCharPos(curElemIndex); // 保存下一个运算符的索引\n        return func(nextCharIndex, dir);\n      } else if (dir === 'next') { // 向下查找 应该获取上一个运算符的索引，从上一个运算符位置开始逐渐向下递归查找\n        const prevCharIndex = getPrevCharIndex(curElemIndex); // 保存上一个运算符的索引\n        return func(prevCharIndex, dir);\n      } else {\n        console.log('---------参赛传递有误，需要传入第二个参数方向----');\n      }\n    };\n    /*\n     * 获取元素的是否是 首元素/中间元素/尾部元素\n     * 判断规则，在当前元素中使用递归方式，向上查找运算符，如果没有找到，说明是首元素。如果向上找到运算符，且向下也找到运算符，说明是中间元素。\n     * 否则的话，就是尾部元素了。\n     * @param { Number } curElemIndex 当前被删除元素的索引\n     * @param { Array } newArrs 在某块范围内查找\n     * @return { Number } index 返回值有 0/1/2/3, 如果等于0的话，说明是首元素，如果等于1的话，说明是中间元素，如果等于2的话，说明是尾部元素,\n     * 如果等于3的话，说明是最后一个元素\n    */\n    const getElemPos = function(curElemIndex, newArrs) {\n\n      const isPrevChar = isHasChar(curElemIndex, newArrs, 'prev');\n      const isNextChar = isHasChar(curElemIndex, newArrs, 'next');\n      console.log('----isPrevChar----', isPrevChar);\n      console.log('----isNextChar---', isNextChar);\n\n      if (isPrevChar && isNextChar) { // 说明是中间元素 \n        return 1;\n      } else if (!isPrevChar && isNextChar) { // 说明是首元素\n        return 0;\n      } else if (isPrevChar && !isNextChar){ // 说明是尾部元素\n        return 2;\n      } else if (!isPrevChar && !isNextChar) { // 说明是最后一个元素\n        return 3;\n      }\n    };\n    // 获取在数组内下一个运算符的位置索引\n    const getNextCharIndex = function(curElemIndex) {\n      let count = 0; // 计时器\n      // 点击某个元素时候，获取该值，如果该值是逻辑运算符的话，那么设置该变量为true\n      let isLogic = false;\n      if (curElemIndex - 3 > 0) { // 为什么减去3呢？因为 sum() 这样的 当是右边括号时候，判断sum的位置就是前面3个\n        const { value } = tokens[curElemIndex - 3];\n        for (let k = 0; k <= logicChars.length - 1; k++) {\n          if (logicChars[k].indexOf(value) > -1) {\n            isLogic = true;\n            break;\n          }\n        }\n      }\n      const func = function(curElemIndex) {\n        // 还是一样，使用递归的方式 向下查找对应的最近的运算符\n        const { value, start, end, type } = tokens[curElemIndex];\n        if (value === null && (end - start === 1) && (type.label === '(')) {\n          if (!isLogic) {\n            count++;\n          }\n        }\n        const flag = chars.some(item => {\n          return item.indexOf(value) > -1;\n        });\n        if (flag) {\n          return curElemIndex - count;\n        } else {\n          if (curElemIndex < tokens.length - 1) {\n            return getNextCharIndex(curElemIndex + 1);\n          }\n        }\n        return -1;\n      }\n      return func(curElemIndex);\n    };\n    // 获取在数组内上一个运算符的位置索引\n    const getPrevCharIndex = function(curElemIndex) {\n      let count = 0; // 计时器\n      var prevFlag = true;\n      const func = function(curElemIndex) {\n        const { value, start, end, type } = tokens[curElemIndex];\n        // 向上递归，如果中间碰到 左括号的话，那么计数器就加1，但是要过滤掉逻辑运算符中的 左括号\n        if (curElemIndex - 1 > 0) {\n          const prevValue = tokens[curElemIndex - 1].value;\n          prevFlag = logicChars.indexOf(prevValue) > -1 ? false : true;\n        }\n        if (value === null && (end - start === 1) && (type.label === '(') && prevFlag) {\n          count++;\n        }\n        const flag = chars.some(item => {\n          return item.indexOf(value) > -1;\n        });\n        if (flag) {\n          return curElemIndex + count;\n        } else {\n          if (curElemIndex - 1 >= 0) {\n            return getPrevCharIndex(curElemIndex - 1);\n          }\n        }\n        return -1;\n      };\n      return func(curElemIndex);\n    };\n    const deleteValue = function(curElemIndex) {\n      const leftIndex = getLeftParenthesisIndex(curElemIndex);\n      const rightIndex = getRightParenthesisIndex(curElemIndex);\n      if (leftIndex > -1 && rightIndex > -1) { // 说明当前元素在小括号范围内\n        // 1) 获取小括号的所有元素 rightIndex + 1 是因为包括最后一个右边小括号\n        let newArrs = tokens.slice(leftIndex, rightIndex + 1);\n\n        // 2）判断小括号内的当前被删除的元素是 首元素/中间元素/尾部元素\n        const curElemPos = getElemPos(curElemIndex, tokens);\n        let startPos = 0; // 保存开始位置索引\n        let endPos = 0; // 保存结束位置索引\n\n        if (curElemPos === 0) { // 首元素\n         /*\n           如果是首元素的话，同样需要判断几种情况，第一种是 (__) + __; 第二种是 (__ + ___) + ___, 第三种是：((___)) + ___\n           第四种情况是：((max(__)) - (min(__))) \n           1）对于第一种情况下，删除数据的时候，startPos = leftIndex; \n           2）对于第二种情况下，如果在小括号内，不止一个元素的话，那么我们就不能把前面的小括号删除掉，因此需要从 leftIndex + 1 开始。\n           所以我们需要判断在 小括号范围内 当前元素的下一个元素是否有运算符，如果有的话，就是第二种情况，否则的话，就是第一种情况。\n         */\n          const isNextChar = isHasChar(curElemIndex, newArrs, 'next'); // 在当前小括号中查找下一个运算符\n          const isNextChar2 = isHasChar(curElemIndex, tokens, 'next'); // 在tokens数组中查找下一个运算符，针对的是第三种情况\n          if (isNextChar) {\n            startPos = leftIndex + 1;\n          } else {\n            if (isNextChar2) {\n              // 这里还需要判断 下一个运算符之前的右括号的数量 是否 和 左边的左括号数量是否相等，如果不想等的话，说明后面还有运算操作\n              const rets = getLeftAndRightCount(curElemIndex, 'prev');\n              const { leftCount, rightCount } = rets;\n              if (leftCount === rightCount) { // 如果左边和右边括号相同的话，说明后面没有内容，是一个整体，可以把整体一起删除掉\n                startPos = 0;\n              } else if (leftCount > rightCount) {\n                startPos = leftCount - rightCount;\n              }\n            } else {\n              startPos = leftIndex;\n            }\n          }\n          // 结束位置判断方法：从 newArrs 数组内查找，从当前 索引 curElemIndex 查找下一个运算符的位置\n          endPos = getNextCharIndex(curElemIndex) + 1; // 因为要把下个运算符删除掉，所以加1\n          tokens.splice(startPos, endPos - startPos); // 截取掉tokens值\n        } else if (curElemPos === 1) { // 中间元素\n          /*\n           * 这里的中间元素，指在tokens数组中 有上个运算符 和 下个运算符，那么也分为几种情况。\n           * 比如说 第一种 1）___ + (___ + ___ - ___) 当我删除小括号中 第一个元素或第二个元素的话，他也是中间元素\n           * 第二种 2) ___ + (___) + ___  当我删除小括号的话，它也属于中间元素。\n           * 因此针对这几种情况，我们也需要判断下\n           * 1）如果在小括号范围之内，没有上个运算符，有下个运算符，说明是在小括号中是首元素。\n           * 2）如果在小括号范围之内，有上个运算符，也有下个运算符，说明是中间元素。\n           * 3）如果在小括号范围内，没有上个运算符，也没有下个运算符，类似第二种情况，因此我们需要把整个小括号删除掉，并且把前面的运算符也删除掉。\n           * 针对上面几种情况，我们需要做如下处理：\n           * 1）针对小括号中 首元素，我们只需要把 首元素 和 后面的运算符一起删除掉。\n           * 2）针对小括号的中间元素，我们需要中 中间元素 和 前面的运算符一起删除掉。\n           * 3）针对第三种情况，我们需要把 小括号的所有删除掉，且需要把前面的运算符也删除掉\n          */\n          \n          // 1）首先我们需要判断的是，在小括号中，当前元素是否有上个运算符 / 下个运算符\n          const isPrevChar = isHasChar(curElemIndex - leftIndex, newArrs, 'prev');\n          const isNextChar = isHasChar(curElemIndex - leftIndex, newArrs, 'next');\n          if (!isPrevChar && isNextChar) { // 小括号中的首元素\n            startPos = leftIndex + 1; // 从小括号中第一个字符截取, 所以加1\n            endPos = getNextCharIndex(curElemIndex) + 1; // 因为要把下个运算符删除掉，所以加1\n            tokens.splice(startPos, endPos - startPos);\n\n          } else if (isPrevChar && isNextChar) { // 小括号中的中间元素\n            startPos = getPrevCharIndex(curElemIndex); // 从上个运算符索引开始删除\n            /*\n             * 获取结束位置，也要分为两种情况，第一种是正常内容，第二种是带有逻辑表达式的，比如 __+ sum(__) + __ 这样的， \n             * 当我删除逻辑表达式时，因为逻辑表达式后面还有一个小括号，需要把小括号算上。\n             * 否则的话，就是当前被删除的索引 curElemIndex + 1; \n            */\n            const { value } = tokens[curElemIndex];\n            const flag = (value === 'L$sum') || (value === 'L$max') || (value === 'L$min') || (value === 'L$count') || (value === 'L$avg') ? true : false; \n            if (flag) {\n              // endPos = getNextCharIndex(curElemIndex) + 1; // 因为逻辑运算符还有右边的小括号\n              endPos = getNextCharIndex(curElemIndex); // // 获取下个运算符的索引当作结束位置\n              tokens.splice(startPos, endPos - startPos); // 把当前被删除的索引 - 上个运算符索引\n            } else {\n              endPos = getNextCharIndex(curElemIndex); // 获取当前的索引\n              tokens.splice(startPos, endPos - startPos); // 下个运算符索引 - 上个运算符索引\n            }\n          } else if (isPrevChar && !isNextChar) { // 小括号的尾部元素\n            // 有上个运算符，没有下个运算符，说明元素在小括号尾部\n            // 1）获取上个运算符的位置，从上个运算符位置开始删除元素\n            startPos = getPrevCharIndex(curElemIndex);\n            // 2）获取右边小括号的位置，\n            endPos = getRightParenthesisIndex(curElemIndex);\n\n            tokens.splice(startPos, endPos - startPos);\n\n          } else if (!isPrevChar && !isNextChar) { // 针对第二种情况\n            /*\n             * 这里也要考虑两种情况，比如上个字符不是运算符的话，那么我不能把上个字符删除掉了。比如 __ + ((__)+(__)) 多个嵌套小括号的。\n             * 第二种情况小括号前面 上个字符是运算符的话，那么我们需要把它删除掉\n            */\n            const { value } = tokens[leftIndex - 1];\n            const flag = chars.some(item => {\n              return item.indexOf(value) > -1;\n            });\n            if (!flag) {\n              startPos = leftIndex; // 前面不是运算符的话，不减去1\n              endPos = getNextCharIndex(curElemIndex) + 1 - startPos;\n              tokens.splice(startPos, endPos); \n            } else {\n              startPos = getPrevCharIndex(curElemIndex); // 获取上个运算符的索引\n              endPos = rightIndex;\n              tokens.splice(startPos, endPos - startPos + 1); \n            }\n          }\n        } else if (curElemPos === 2) { // 如果是小括号中尾部元素\n\n          startPos = getPrevCharIndex(curElemIndex);\n          /*\n           * 1）从尾部删除掉\n           * 如果是小括号中尾部元素，又分为两种情况\n           * 第一种是： __ + (__ + ___)\n           * 第二种是： __ + (___)\n           * 第三种就是 count这种 count 逻辑表达式允许：count(___ / (___)) \n           * 如果对于第一种的话，当我删除括号中最后一个元素的时候，我们需要把 + 运算符 和 最后那个元素一起删除掉，因此我们这边需要判断该删除\n           * 的元素前面是否有运算符，如果有运算符的话，说明是删除小括号中的最后一个字符。否则的话，就是第二种情况，把整个小括号内容删除掉，并且还需要\n           * 把前面的运算符 + 号删除掉。\n           * curElemIndex - leftIndex 的含义是，首先 newArrs 这个数组是从 小括号中 左括号 到 右括号 截取的数据。但是左小括号前面还有很多表达式的，\n           * curElemIndex的索引是从tokens数组里面的索引的，因此我们需要减掉 前面的表达式索引，前面有多少个表达式，可以根据左括号的索引判断，所以减去\n           * 左括号的索引即可得到正确的索引\n          */\n          const isPrevChar = isHasChar(curElemIndex - leftIndex, newArrs, 'prev');\n\n          // 在tokens数组中查找上一个运算符，针对的是第三种情况, \n          // 当我删除 count(___ / (___))  最后一个元素的时候，我需要在tokens判断是否有运算符\n          const isPrevChar2 = isHasChar(curElemIndex , tokens, 'prev');\n          if (isPrevChar) {\n            endPos = rightIndex;\n            // tokens.splice(startPos, endPos - startPos + 1); \n            tokens.splice(startPos, endPos - startPos); \n          } else {\n            if (isPrevChar2) {\n              // 获取下个小括号的索引\n              endPos = rightIndex -startPos + 1; // 因为要加上前面的运算符\n              tokens.splice(startPos, endPos);\n            } else {\n              tokens.splice(startPos);\n            }\n          }\n         \n        } else if (curElemPos === 3) { // 最后一个元素\n          startPos = 0;\n          tokens.splice(startPos);\n        }\n      } else { // 说明当前元素不在小括号范围内\n        let startPos = 0; // 保存开始位置索引\n        let endPos = 0; // 保存结束位置索引\n        // 是否有 count 字符\n        const isHasCount = function() {\n          let flag = false;\n          for (let i = 0; i < tokens.length; i++) {\n            const { value } = tokens[i];\n            if (value === 'count') {\n              flag = true;\n              break;\n            }\n          }\n          return flag;\n        };\n        // 判断当前被删除的元素是 首元素/中间元素/尾部元素\n        const curElemPos = getElemPos(curElemIndex, tokens);\n        if (curElemPos === 0) { // 首元素\n          // 这里一样要判断是否有count 比如 像 count(__ / ___) + ___ 这种 删除count的第一个元素的话，需要处理\n          const flag = isHasCount();\n          if (flag) {\n            if (curElemIndex + 1 <= tokens.length - 1) {\n              const val = tokens[curElemIndex + 1].value;\n              if (chars.indexOf(val) > -1) { // 说明有下一个运算符\n                startPos = curElemIndex;\n                endPos = getNextCharIndex(curElemIndex) + 1;\n                tokens.splice(startPos, endPos - startPos);\n              } else {\n                // 如果是首元素的话，我需要删除 从 0 开始，到下个运算符结束位置，包括运算符索引\n                startPos = 0;\n                endPos = getNextCharIndex(curElemIndex) + 1;\n                tokens.splice(startPos, endPos);\n              }\n            }\n          } else {\n            // 如果是首元素的话，我需要删除 从 0 开始，到下个运算符结束位置，包括运算符索引\n            startPos = 0;\n            endPos = getNextCharIndex(curElemIndex) + 1;\n            tokens.splice(startPos, endPos);\n          }\n          \n        } else if (curElemPos === 1 || curElemPos === 2) { // 中间元素 或 尾部元素\n          // 如果是 中间元素 或 尾部元素 则需要删除上一个运算符 加 当前的元素\n          startPos = getPrevCharIndex(curElemIndex);\n          endPos = getNextCharIndex(curElemIndex);\n          if (endPos === -1) {\n            // 这里还需要判断 像 count(__ / ___) 这种，如果我删除最后一个的话，就不需要把最后小括号删除掉\n            // 这里我们还需要判断前面有没有运算符，如果前面有运算符的话，我们只需要截取掉 运算符 + 被删除的元素即可\n            const val = tokens[curElemIndex].value;\n            const flag = isHasCount();\n            if (val !== 'L$count' && flag) {\n              endPos = curElemIndex - startPos + 1; // 因为需要把前面运算符一起删除，因此加1\n              tokens.splice(startPos, endPos);\n            } else {\n              tokens.splice(startPos); // 截取掉tokens值\n            }\n          } else {\n            // 这里还需要判断一种情况，比如 count(__/___); 当我删除运算符最后一个元素的时候，只需要把 / 运算符 和 元素删除即可\n            // 我只需要判断当前元素的前一个元素是否有运算符，如果有运算符的话，删除运算符 和 当前元素即可\n            let flag = isHasChar(curElemIndex, tokens, 'prev');\n            if (flag) {\n              endPos = curElemIndex - startPos + 1; // 因为后面还需要加上运算符\n              tokens.splice(startPos, endPos);\n            } else {\n              tokens.splice(startPos, endPos - startPos); // 截取掉tokens值\n            }\n          }\n        } else if (curElemPos === 3) { // 最后元素\n          startPos = 0;\n          endPos = tokens.length;\n          tokens.splice(startPos, endPos); // 截取掉tokens值\n        }\n      }\n    };\n\n    tokens.forEach((element, index) => {\n      if ((element.value === curValue) && (element.start === start) && (element.end === end)) {\n        // tokens.splice(index, 1);\n        // 下面是针对类似这种情况的 sum(xxx === yyy) 这样的\n        // 当前元素的上一个元素 比如 删掉 yyy, 那么上一个元素 === 也要被删除\n        deleteValue(index);\n      }\n    });\n    // 重新设置tokens中的start和end的value\n    setStartAndEndValue(tokens);\n\n    console.log('----xxxx----tokens---', tokens);\n    console.log('---this.props.expressionItem---', this.props.expressionItem);\n    console.log('----value----', value);\n\n    if (tokens.length === 0) {\n      this.props.expressionItem[parentIndex].data[subIndex] = null;\n    }\n    this.props.onHandler && this.props.onHandler(this.props.expressionItem);\n  }\n  render() {\n    const { value, allow, index, subIndex } = this.props;\n    if (!value) return null\n    const { tokens } = value;\n\n    return <div className=\"exp-context\">\n      {\n        tokens && tokens.map(o => {\n          if (o.type.label === 'eof') {\n            return\n          }\n          console.log('-------o.value-----', o.value);\n          let val = o.value && o.value.toString()\n          if (/^[A-Z]+\\$/.test(val)) {\n            let temp = null\n            let splits = o.value.split('$')\n            let type = splits[0]\n            let key = splits[1]\n\n            switch (type) {\n              case 'BLANK':\n                temp = <DropTarget empty primaryKey={['root', 'label', 'blank', 'relationExp', 'text']}>\n                  <Container className=\"exp-container\" onChange={this.handleChange(o.start, o.end)} />\n                </DropTarget>\n                break\n              case 'A':\n                temp = <DropTarget empty primaryKey={['root', 'label', 'blank', 'relationExp', 'text']}>\n                  <Container className=\"exp-container\" onChange={this.handleChange(o.start, o.end)} />\n                </DropTarget>\n                break\n              case 'R':\n                temp = <DropTarget empty primaryKey={['root', 'label', 'blank', 'relationExp', 'text']}>\n                  <Container className=\"exp-container\" onChange={this.handleChange(o.start, o.end)} />\n                </DropTarget>\n                break\n              case 'L':\n                if (key === 'count') {\n                  temp = <DropTarget empty allow={allow} primaryKey={['relationExp', 'label', 'blank', 'text', 'root']}>\n                    <Container className=\"exp-container\" onChange={this.handleChange(o.start, o.end)} />\n                  </DropTarget>\n                  break\n                }\n                temp = <DropTarget primaryKey=\"label\" allow={allow}>\n                  <Container className=\"exp-container\" onChange={this.handleChange(o.start, o.end)} />\n                </DropTarget>\n                break\n              case 'LABEL':\n                temp = <DropTarget primaryKey=\"label\">\n                  <Container className=\"exp-container\" value={key} onChange={this.handleChange(o.start, o.end)} />\n                </DropTarget>\n                break\n              case 'TEXT':\n                temp = <ContentEditable type=\"number\" content={key.replace(/Q/, '.')} placeholder=\"值\" onBlur={this.handleTextChange(o.start, o.end)} className=\"exp-container small\" />\n                break\n            }\n            const triggerElem1 = <span className=\"exp-tag\" data-start={o.start} data-end={o.end}>{temp}</span>\n            return <Balloon closable={false} triggerType=\"hover\" trigger={triggerElem1} align=\"t\"><a onClick={this.removeItem.bind(this, o, value, index, subIndex)} href=\"javascript:void(0)\">删除</a></Balloon>\n          }\n          return <span data-start={o.start} data-end={o.end}>{o.value || o.type.label}</span>\n        })\n      }\n    </div>\n  }\n}","\nexport const deviceTypeList = [\n  {\n    code: \"1\",\n    name: \"测试1\"\n  },\n  {\n    code: \"2\",\n    name: \"测试2\"\n  },\n  {\n    code: \"3\",\n    name: \"测试3\"\n  },\n  {\n    code: \"4\",\n    name: \"测试4\"\n  },\n  {\n    code: \"5\",\n    name: \"测试5\"\n  },\n  {\n    code: \"6\",\n    name: \"测试6\"\n  },\n];","import { Feedback } from '@alife/aisc';\n\nexport function $generate(ast) {\n  if (!ast || !ast.tokens) return '';\n  let t = ast.tokens && ast.tokens.map(o => {\n    if (o.type.label === 'eof') return '';\n    return o.value || o.type.label\n  }).join('')\n  return t;\n}\n\nexport function ast2Str(ast) {\n  if (!ast) return '';\n  if (ast.conditionDefinition) {\n    ast = ast.conditionDefinition;\n  }\n  let t = ast.tokens && ast.tokens.map(o => {\n    if (o.type.label === 'eof') return ''\n    if (o.value) {\n      if (/LABEL\\$(.*)\\$[0-9_]/.test(o.value)) {\n        return o.value.split('$')[2];\n      } else if (/TEXT\\$(.*)/.test(o.value)) {\n        return o.value.split('$')[1];\n      } else {\n        return o.value;\n      }\n    }\n    return o.type.label\n  }).join('');\n  if (/(\\(\\S*-\\S*\\))/.test(t)) {\n    t = t.replace(/LABEL\\$\\S*\\$/, '')\n  }\n  return t\n}\n\nexport function replaceDefinition(str) {\n  if (!str) return;\n  str = str.replace(/[\\[\\]]/g, '')\n  str = str.replace(/([a-z]*)\\(([^()]*)\\)/g, '$1([$2])')\n  str = str.replace(/Q/g, '.')\n  return str\n}\n\n// 特殊字符转换成繁体字\nexport function charToChinese(currentCode) {\n  return currentCode.replace(/\\[/g, '佐').replace(/\\]/g, '佑').replace(/\\（/g, '琢').replace(/\\）/g, '鼬')\n  .replace(/\\%/g, '鼢').replace(/\\s/g, '').replace(/——/g, '線').replace(/\\_/g, '劃').replace(/\\【/g, '塗').replace(/\\】/g, '華')\n  .replace(/\\{/g, '師').replace(/\\}/, '學').replace(/\\{/g, '轉').replace(/\\}/, '換').replace(/℃/g, '攝')\n  .replace(/、/g, '頓').replace(/《/g, '體').replace(/》/g, '簡').replace(/，/g, '竇').replace(/；/g, '墳').replace(/#/g, '賤')\n  .replace(/。/g, '鞫').replace(/&/g, '壑').replace(/\"/g, '癮').replace(/@/g, '藹');\n}\n\n// 繁体字转换成特殊字符\n\nexport function chineseToChar(currentCode) {\n  return currentCode.replace(/佐/g, '[').replace(/佑/g, ']').replace(/琢/g, '（').replace(/書/g, '(')\n  .replace(/鼬/g, '）').replace(/鼢/g, '%').replace(/筆/g, ')').replace(/頓/g, '、').replace(/賈/g, '+').replace(/撐/g, '*')\n  .replace(/線/g, '——').replace(/劃/g, '_').replace(/塗/g, '【').replace(/華/g, '】').replace(/師/g, '{').replace(/廚/g, '/')\n  .replace(/學/g, '}').replace(/轉/g, '{').replace(/換/g, '}').replace(/國/g, '-').replace(/攝/g, '℃').replace(/撐/g, '*')\n  .replace(/體/g, '《').replace(/簡/g, '》').replace(/竇/g, '，').replace(/墳/g, '；').replace(/賤/g, '#').replace(/鞫/g, '。')\n  .replace(/壑/g, '&').replace(/癮/g, '\"').replace(/藹/g, '@');\n}\n\nexport function validatorData(data) {\n  let flag = false;\n  const chars = ['+', '-', '*', '/', '==', '!=', '>=', '<=', '>', '<'];\n  for (let i = 0, ilen = chars.length; i < ilen; i++) {\n    if (data.indexOf(chars[i]) > -1) {\n      const strs = data.split(chars[i]);\n      if (strs.length) {\n        for (let j = 0, jlen = strs.length; j < jlen; j++) {\n          if (strs[j] === '') {\n            flag = true;\n            break;\n          }\n        }\n      }\n    }\n  }\n  return flag;\n}\n\n// 获取url后的参数\nexport function getUrlParams(param) {\n  var query = window.location.search.substring(1);\n  var vars = query.split('&');\n  for (var i = 0; i < vars.length; i++) {\n    var pair = vars[i].split('=');\n    if(pair[0] == param) {\n      return pair[1];\n    }\n  }\n  return false;\n}\n\nexport function validatorFunc(expressObj) {\n  const isStr = function(str) {\n    return Object.prototype.toString.call(str)==\"[object String]\"\n  };\n  if (expressObj && expressObj.length) {\n    for (let k = 0, klen = expressObj.length; k < klen; k++) {\n      const cItem = expressObj[k];\n      if (!expressObj[k].isAlreadyRemove) {\n        const conditionDefinition = cItem.conditionDefinition || cItem.definition;\n        if (isStr(conditionDefinition)) {\n          if (conditionDefinition.indexOf('R$x') > -1 ||\n          conditionDefinition.indexOf('BLANK$') > -1 || \n          conditionDefinition.indexOf('L$sum') > -1 || \n          conditionDefinition.indexOf('L$avg') > -1 || \n          conditionDefinition.indexOf('L$max') > -1 || \n          conditionDefinition.indexOf('L$min') > -1 || \n          conditionDefinition.indexOf('L$count') > -1 || \n            validatorData(conditionDefinition)\n          ) {\n            Feedback.toast.show({\n              type: 'error',\n              content: '判断条件请填写完整'\n            });\n            return;\n          }\n        } else {\n          Feedback.toast.show({\n            type: 'error',\n            content: '判断条件请填写完整'\n          });\n          return;\n        }\n        if (expressObj && expressObj.length) {\n          for (let m = 0, mlen = expressObj.length; m < mlen; m++) {\n            const curItem = expressObj[m];\n            if (!curItem.isAlreadyRemove) {\n              if (!curItem.conditonType) {\n                Feedback.toast.show({\n                  type: 'error',\n                  content: '关联项请填写完整'\n                })\n                return;\n              }\n              if (curItem.conditonType === 2) {\n                if (curItem.conditonValue === '') {\n                  Feedback.toast.show({\n                    type: 'error',\n                    content: '关联项的值请填写完整'\n                  })\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return true;\n}\n\n\n\n","import React, { Component } from 'react';\nimport Target from '@components/target';\nimport ConnectDropTarget from '@components/connectDropTarget';\nimport Arithmetic from '@components/arithmetic';\nimport Relation from '@components/relations';\nimport Logic from '@components/logic';\nimport Container from '@components/container';\nimport BaseExp from '@components/baseExp';\nimport { deviceTypeList } from '@components/datas/deviceTypeList';\nimport _ from 'lodash';\nimport { Card, Icon, Form, Select } from '@alife/aisc';\n\nimport {\n  $generate,\n  charToChinese,\n  chineseToChar,\n} from '@components/utils';\n\nconst babylon = require('babylon');\n\nconsole.log('----deviceTypeList----', deviceTypeList);\n\nconst { Combobox } = Select;\n\n// 获取下拉框的值，这里没有ajax请求，直接写死数据\nconst GLOBAL_ARRS = [];\ndeviceTypeList.forEach(item => {\n  GLOBAL_ARRS.push({\n    label: item.name,\n    value: item.name,\n    _value: item.code\n  });\n});\nconsole.log('-----GLOBAL_ARRS----', GLOBAL_ARRS);\n\nconst DropTarget = function (props) {\n  let P = ConnectDropTarget(Target, props.primaryKey)\n  return <P {...props}>{props.children}</P>\n};\n\n// 关联项\nconst relationshipItemArrs = [\n  {\n    label: '默认',\n    value: 1\n  },\n  {\n    label: '设备类型',\n    value: 2\n  }\n];\n\nexport default class MonitorItemExpression extends Component {\n  constructor(props) {\n    super(props);\n  }\n  state = {\n    defaultExpression: null,\n  }\n  emitChange = () => {\n    const { expression } = this.state\n    const { onChange = e => e } = this.props\n    onChange(expression)\n  }\n  handleChange = (val, component, start, end, index, subIndex) => {\n    console.log('---xxx----进来了');\n    index = index || 0; // 父列表索引\n    subIndex = subIndex || 0; // 子列表索引\n\n    let { expressionItem, parentHandler, saveExpression } = this.props;\n    let currentCode = '';\n    let expressionSingleItem = null;\n    if (expressionItem[index].data[subIndex] && expressionItem[index].data[subIndex].conditionDefinition) {\n      expressionSingleItem = expressionItem[index].data[subIndex].conditionDefinition;\n    } else {\n      expressionSingleItem = expressionItem[index].data[subIndex];\n    }\n    let preCode = $generate(expressionSingleItem);\n    \n    if (typeof val === 'string') {\n      currentCode = preCode.slice(0, start) + `TEXT$${val}` + preCode.slice(end, preCode.length);\n    } else if (val.isLabel) {\n      currentCode = preCode.slice(0, start) + `LABEL$${val.customName}$${val.customId}` + preCode.slice(end, preCode.length)\n    } else {\n\n      switch (val.type) {\n        case 'arithExp':\n        case 'relationExp':\n\n          currentCode = expressionItem[index] && expressionItem[index].data[subIndex] && !component.props.empty ? val.value(false, true) : val.value(true, true)\n          if (start || end) {\n            currentCode = preCode.slice(0, start) + currentCode.slice(0, currentCode.length) + preCode.slice(end, preCode.length)\n          } else {\n            currentCode = preCode + currentCode\n          }\n          break\n        case 'logicExp':\n        case 'bracketsExp':\n        case 'text':\n          currentCode = val.value()\n          if (start || end) {\n            currentCode = preCode.slice(0, start) + currentCode.slice(0, currentCode.length) + preCode.slice(end, preCode.length)\n          } else {\n            currentCode = val.value()\n          }\n          break\n      }\n    }\n    currentCode = charToChinese(currentCode);\n\n    let t = babylon.parse(currentCode.replace(/\\./g, 'Q'))\n    t.tokens.map(o => {\n      o.value = o.value ? chineseToChar(o.value) : null;\n    })\n    expressionItem[index].data[subIndex] = t;\n    saveExpression[index].data[subIndex] = t;\n    parentHandler(expressionItem, saveExpression);\n  }\n  handleClear = (index, subIndex) => {\n   const { expressionItem, saveExpression, parentHandler } = this.props;\n   if (expressionItem[index].data[subIndex] && expressionItem[index].data[subIndex].id) {\n     saveExpression[index].data[subIndex].editClear = true;\n     saveExpression[index].data[subIndex].deleted = (new Date()).getTime();\n   }\n   expressionItem[index].data[subIndex] = null;\n   console.log('---expressionItem---', expressionItem);\n   parentHandler(expressionItem, saveExpression);\n  }\n  componentDidMount() {\n    const { value } = this.props;\n    if (value) {\n      this.setState({\n        expression: value\n      })\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    const { value } = nextProps\n    if (value) {\n      this.setState({\n        expression: value\n      })\n    }\n  }\n  /*\n   * @param { rootIndex } 父节点的索引\n   * @param { subIndex } 子节点的索引\n  */\n  removeSubItem(rootIndex, subIndex) {\n    console.log('----rootIndex----', rootIndex);\n    console.log('----subIndex----', subIndex);\n    const { expressionItem, parentHandler, callbackItemDefinitions } = this.props;\n    const cItem = expressionItem[rootIndex].data[subIndex];\n    const callbackItem = callbackItemDefinitions && callbackItemDefinitions[rootIndex] ? callbackItemDefinitions[rootIndex][subIndex] : null;\n\n    // console.log('----callbackItemDefinitions---', callbackItemDefinitions);\n\n    if (cItem && cItem.id) {\n      // 说明是删除修改页面本来有的项 只需要将id改为时间戳，并且增加一个标识 渲染的时候，通过该标示不重新渲染\n      if (expressionItem[rootIndex].data[subIndex]) {\n        expressionItem[rootIndex].data[subIndex].deleted = (new Date()).getTime();\n        expressionItem[rootIndex].data[subIndex].isDeleted = true;\n        delete expressionItem[rootIndex].data[subIndex].conditionDefinition;\n      } else {\n        expressionItem[rootIndex].data.splice(subIndex, 1);\n      }\n    } else {\n      // 有这么一种逻辑，页面一进来有数据，当用户先清除掉，再删除掉数据操作，需要处理下\n      if (callbackItem && callbackItem.id) {\n        // 说明是删除修改页面本来有的项 只需要将id改为时间戳，并且增加一个标识 渲染的时候，通过该标示不重新渲染\n        if (callbackItemDefinitions[rootIndex][subIndex]) {\n          callbackItemDefinitions[rootIndex][subIndex].deleted = (new Date()).getTime();\n          callbackItemDefinitions[rootIndex][subIndex].isDeleted = true;\n          delete callbackItemDefinitions[rootIndex][subIndex].conditionDefinition;\n          expressionItem[rootIndex].data.splice(subIndex, 1);\n        }\n      } else {\n        expressionItem[rootIndex].data.splice(subIndex, 1);\n      }\n    }\n    console.log('----最终返回的数据111---', expressionItem)\n    console.log('----最终返回的数据222---', callbackItemDefinitions);\n    if (callbackItemDefinitions && callbackItemDefinitions.length) {\n      for (let c1 = 0, clen1 = callbackItemDefinitions.length; c1 < clen1; c1++) {\n        const c1Items = callbackItemDefinitions[c1];\n        if (c1Items && c1Items.length) {\n          for (let c2 = 0, clen2 = c1Items.length; c2 < clen2; c2++) {\n            if (c1Items[c2].isDeleted && !expressionItem[c1].data[c2]) {\n              expressionItem[c1].data.push({\n                deleted: c1Items[c2].deleted,\n                id: c1Items[c2].id,\n                isAlreadyRemove: true,\n              });\n            }\n          }\n        }\n      }\n    }\n    let num = 0;\n    if (expressionItem[rootIndex].data) {\n      expressionItem[rootIndex].data.forEach(item => {\n        if ((item && item.isDeleted) || (item && item.isAlreadyRemove)) {\n          num = num + 1;\n        }\n      });\n    }\n    // 判断是否是最后一项数据, 给父级节点添加标识\n    if (num === expressionItem[rootIndex].data.length) {\n      expressionItem[rootIndex].isAllRemove = true;\n    }\n    if (expressionItem[rootIndex].data.length === 0) {\n      // 把外层容器删除掉\n      expressionItem.splice(rootIndex, 1);\n    }\n    // 调用父组件的方法，重新渲染页面\n    parentHandler(expressionItem, expressionItem);\n  }\n  /*\n   * @param { rootIndex } 父节点的索引\n   * @param { subIndex } 子节点的索引\n  */\n  addItem(rootIndex, subIndex) {\n    console.log('----rootIndex----', rootIndex);\n    console.log('----subIndex----', subIndex);\n    const { expressionItem, parentHandler } = this.props;\n    const { defaultExpression } = this.state;\n    expressionItem[rootIndex].data.push(defaultExpression);\n    \n    // 调用父组件的方法，重新渲染页面\n    parentHandler(expressionItem, expressionItem);\n  }\n  /*\n   * 向下移动\n  */\n  moveDown(rootIndex, subIndex) {\n    console.log('---moveDown---');\n    // 不管是向上移动还是向下移动，父容器是永远不会变的，只改变子节点的数据\n    // 向下移动就是把当前的数据插入到数组中的下一个位置上\n    const { expressionItem, parentHandler } = this.props;\n    const index = subIndex + 1;\n    const temp = expressionItem[rootIndex].data[index];\n    expressionItem[rootIndex].data[index] = expressionItem[rootIndex].data[subIndex];\n    expressionItem[rootIndex].data[subIndex] = temp;\n    // 调用父组件的方法，重新渲染页面\n    parentHandler(expressionItem, expressionItem);\n  }\n  /*\n   * 向上移动\n  */\n  moveUp(rootIndex, subIndex) {\n    console.log('---moveUp---');\n    // 不管是向上移动还是向下移动，父容器是永远不会变的，只改变子节点的数据\n    // 向上移动就是把当前的数据插入到数组中的上一个位置上\n    const { expressionItem, parentHandler } = this.props;\n    const index = subIndex - 1;\n    const temp = expressionItem[rootIndex].data[index];\n    expressionItem[rootIndex].data[index] = expressionItem[rootIndex].data[subIndex];\n    expressionItem[rootIndex].data[subIndex] = temp;\n    // 调用父组件的方法，重新渲染页面\n    parentHandler(expressionItem, expressionItem);\n  }\n  // 关联项\n  conditonType = (item, pIndex) => {\n    console.log('----item-----', item);\n    const { expressionItem, parentHandler } = this.props;\n    expressionItem[pIndex].conditon_type = item.label;\n    expressionItem[pIndex].conditon_type_value = item.value;\n    if (Number(item.value) === 2) {\n        expressionItem[pIndex].deviceTypeLists = GLOBAL_ARRS;\n        // 调用父组件的方法，重新渲染页面\n        parentHandler(expressionItem, expressionItem);\n    } else {\n      expressionItem[pIndex].deviceTypeLists = [];\n      expressionItem[pIndex].conditon_deviceName = '';\n      expressionItem[pIndex].conditon_deviceName_value = '';\n      // 调用父组件的方法，重新渲染页面\n      parentHandler(expressionItem, expressionItem);\n    }\n  }\n  // 关联项的值\n  conditonValue = (items, pIndex) => {\n    console.log('-----关联项的值----');\n    const { expressionItem, parentHandler } = this.props;\n    let label = '';\n    let value = '';\n    if (items && items.length) {\n      items.forEach(item => {\n        if (item && (item !== \"\")) {\n          label += ',' + item.label;\n          value += ',' + item._value;\n        }\n      });\n    }\n    label = label.substr(1);\n    value = value.substr(1);\n    expressionItem[pIndex].conditon_deviceName = label;\n    expressionItem[pIndex].conditon_deviceName_value = value;\n    // 调用父组件的方法，重新渲染页面\n    parentHandler(expressionItem, expressionItem);\n  }\n  /*\n   * 从 baseExp 中调用的回调函数\n  */\n  onHandler = (expressionItem) => {\n    this.props.parentHandler(expressionItem, expressionItem);\n  }\n  render() {\n    const { expressionItem } = this.props;\n    console.log('----渲染数据-22333---expressionItem---', expressionItem);\n\n    return <div className=\"expression-div\">\n      {\n        expressionItem.map((pItem, pIndex) => {\n          const isAllRemove = pItem.isAllRemove;\n          return (\n            <div className=\"monitor-subItem\" style={{ display: isAllRemove ? \"none\" : \"block\" }}>\n              <div className=\"expression-left\">\n                <Form>\n                  <Form.Item>\n                    <Select placeholder=\"请选择关联项\"\n                      style={{ width: 160 }}\n                      dataSource={relationshipItemArrs}\n                      value={pItem.conditon_type_value}\n                      onChange={ (value, item) => {\n                        this.conditonType(item, pIndex);\n                      }}\n                    />\n                  </Form.Item>\n                  <Form.Item>\n                    <Combobox\n                      placeholder=\"请选择\"\n                      style={{ width: 160 }}\n                      dataSource={ pItem.deviceTypeLists }\n                      value={ pItem.conditon_deviceName && pItem.conditon_deviceName.split(',') }\n                      multiple\n                      onChange = { (value, item) => {\n                        this.conditonValue(item, pIndex);\n                      }}\n                    />\n                  </Form.Item>\n                </Form>\n              </div>\n              <div className=\"expression-right\">\n                {\n                  pItem && pItem.data && pItem.data.map((item, index) => {\n                    let curItem = item;\n                    if (item) {\n                      if (item.conditionDefinition || item.definition) {\n                        curItem = item.definition || item.conditionDefinition;\n                      }\n                    }\n                    const isShow = !curItem || (curItem && !curItem.isDeleted && !curItem.isAlreadyRemove);\n                    return (\n                      <div className=\"r-container\" style={{ display: isShow ? 'block' : 'none' }}>\n                        <DropTarget primaryKey={['root']}> \n                          <Container onClear={() => {\n                            this.handleClear(pIndex, index);\n                          }} className=\"next-input next-input-multiple drop-container\" hasClear value={<BaseExp value={curItem} onChange={this.handleChange} index={pIndex} subIndex={index} expressionItem={expressionItem} onHandler={this.onHandler} />}\n                            style={{ marginRight: '20px', display: 'block', width: 'auto' }} placeholder=\"请从左侧引用测点，下方拖动表达式进行编辑\" onChange={this.handleChange} index={pIndex} subIndex={index} expressionItem={expressionItem} onHandler={this.onHandler} />\n                        </DropTarget>\n                        <Icon type=\"ashbin-o\" size=\"small\" onClick={() => {\n                          this.removeSubItem(pIndex, index)\n                        }}></Icon>\n                        {\n                          index === 0 && (index === pItem.data.length - 1) ? '' : (index === 0 ? <Icon type=\"shebeishangxian\" size=\"small\" onClick={() => {\n                            this.moveDown(pIndex, index)\n                          }} /> : (index === pItem.data.length - 1 ? <Icon type=\"shebeixiaxian\" size=\"small\" onClick={() => {\n                            this.moveUp(pIndex, index)\n                          }} /> : <span><Icon type=\"shebeixiaxian\" size=\"small\" onClick={() => {\n                            this.moveUp(pIndex, index)\n                          }} /><Icon type=\"shebeishangxian extra-direction\" size=\"small\" onClick={() => {\n                            this.moveDown(pIndex, index)\n                          }} /></span>))\n                        }\n                        {\n                          index === pItem.data.length - 1 ? <Icon type=\"add-circular\" className={index === 0 && (index === pItem.data.length - 1) ? 'add-circular2' : ''} size=\"small\" onClick={() => {\n                            this.addItem(pIndex, index)\n                          }} /> : ''\n                        }\n                      </div>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        })\n      }\n      <div style={{ marginTop: 4 }} className=\"flex symbols\">\n        {/* 算数表达式 */}\n        <Arithmetic />\n        <Relation />\n        <Logic />\n      </div>\n    </div>\n  }\n}\n","const babylon = require('babylon');\n\n// 根据节点id找对应的数据\nfunction getParamsById(nodeId, datas) {\n  let obj = null; // 保存过滤后的结果\n  const getNodeFunc = function(datas) {\n    if (datas && datas.length) {\n      datas.forEach(node => {\n        if (node.customId === nodeId) {\n          obj = node;\n          return;\n        }\n        if (node.data) {\n          getNodeFunc(node.data);\n        }\n      });\n    }\n  }\n  if (datas && datas.length) {\n    datas.forEach(item => {\n      if (item.data && item.data.length) {\n        getNodeFunc(item.data);\n      }\n    });\n  }\n  return obj;\n}\nfunction valueParse(value, dataSource) {\n  console.log('---返回--dataSource', dataSource);\n  console.log('---kongzhi-----', value);\n  let val = value && value.replace(/[\\[\\]]/g, '').replace(/([0-9]+_*[0-9]*)/g, (v1, v2) => {\n    const obj = getParamsById(v2, dataSource);\n    if (obj) {\n      if (obj.customId == v2) {\n        if (obj.customName && obj.customName.indexOf('+') !== -1) {\n          obj.customName = obj.customName.replace(/\\+/g, '賈');\n        }\n        if (obj.customName && obj.customName.indexOf('-') !== -1) {\n          obj.customName = obj.customName.replace(/-/g, '國');\n        }\n        if (obj.customName && obj.customName.indexOf('*') !== -1) {\n          obj.customName = obj.customName.replace(/\\*/g, '撐');\n        }\n        if (obj.customName && obj.customName.indexOf('/') !== -1) {\n          obj.customName = obj.customName.replace(/\\//g, '廚');\n        }\n        return `LABEL$${obj.customName}$${v2}`\n      } else {\n        return `TEXT$${v2}`\n      }\n    } else {\n      return `TEXT$${v2}`\n    }\n  }).replace(/([\\+\\-\\*\\/\\=<>])([0-9]+Q?[0-9]*)/g, (v1, v2, v3) => {\n    return `${v2}TEXT$${v3}`\n  })\n  try {\n    val = val.replace(/\\[/g, '佐').replace(/\\]/g, '佑').replace(/[\\（]/g, '琢').replace(/\\）/g, '鼬').replace(/\\%/g, '鼢')\n    .replace(/\\s/g, '').replace(/\\./g, 'Q').replace(/——/g, '線').replace(/\\_/g, '劃').replace(/、/g, '頓')\n    .replace(/\\【/g, '塗').replace(/\\】/g, '華').replace(/\\{/g, '師').replace(/\\}/, '學').replace(/\\{/g, '轉').replace(/\\}/, '換')\n    .replace(/℃/g, '攝').replace(/《/g, '體').replace(/》/g, '簡').replace(/，/g, '竇').replace(/；/g, '墳').replace(/#/g, '賤')\n    .replace(/。/g, '鞫')/*.replace(/&/g, '壑')*/.replace(/\"/g, '癮').replace(/@/g, '藹');\n    const by = babylon.parse(val);\n    by.tokens.map(o => {\n      o.value = o.value ? o.value.toString().replace(/佐/g, '[').replace(/佑/g, ']').replace(/琢/g, '（').replace(/書/g, '(').replace(/鼬/g, '）')\n      .replace(/筆/g, ')').replace(/鼢/g, '%').replace(/Q/g, '.').replace(/頓/g, '、').replace(/賈/g, '+').replace(/撐/g, '*').replace(/癮/g, '\"')\n      .replace(/線/g, '——').replace(/劃/g, '_').replace(/塗/g, '【').replace(/華/g, '】').replace(/師/g, '{').replace(/廚/g, '/').replace(/藹/g, '@')\n      .replace(/學/g, '}').replace(/轉/g, '{').replace(/換/g, '}').replace(/國/g, '-').replace(/攝/g, '℃').replace(/擤/g, '*')/*.replace(/壑/g, '&')*/\n      .replace(/體/g, '《').replace(/簡/g, '》').replace(/竇/g, '，').replace(/墳/g, '；').replace(/賤/g, '#').replace(/鞫/g, '。'): null;\n    });\n    return by;\n  } catch (e) {\n    console.error(val, e)\n  }\n}\n\nfunction replaceDefinition(str) {\n  if (!str) return;\n  str = str.replace(/\\b=\\b/g, '==')\n  str = str.replace(/\\<\\>/g, '!=')\n  str = str.replace(/\\./g, 'Q')\n  str = str.replace(/\\s/g, '')\n  return str\n}\nexport default async function parse(metricLibraryItemDefinitions, customMetricItems) {\n  console.log('-----请求进来了-----', customMetricItems);\n  console.log('----metricLibraryItemDefinitions----', metricLibraryItemDefinitions);\n  const rets = [];\n  metricLibraryItemDefinitions.forEach(item => {\n    const arrs = [];\n    if (item && item.length) {\n      item.forEach(citem => {\n        if (citem.definition) {\n          arrs.push({\n            conditonType: citem.conditonType,\n            conditonValue: citem.conditonValue,\n            conditonValueName: citem.conditonValueName,\n            deleted: citem.deleted,\n            id: citem.id,\n            definitionOrder: citem.definitionOrder,\n            conditionDefinition: valueParse(replaceDefinition(citem.definition), customMetricItems),\n          });\n        }\n      });\n    }\n    if (arrs.length) {\n      rets.push(arrs);\n    }\n  });\n  return {\n    definitions: rets,\n  }\n}","import React, { Component } from 'react';\nimport { Button, Feedback } from '@alife/aisc';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport DeviceTypeNodes from '@components/deviceTypeNodes';\nimport MonitorItemExpression from '@components/monitorItemExpression';\nimport _ from 'lodash';\nimport { customMetricItems } from '@components/datas/customMetricItems';\nimport Parse from '@components/parse';\n\nimport {\n  getUrlParams,\n  replaceDefinition,\n  ast2Str,\n  validatorFunc,\n} from '@components/utils';\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: [\n        {\n          data: [null],\n          conditon_type: '',\n          conditon_type_value: '',\n          conditon_deviceName: '',\n          conditon_deviceName_value: '',\n        }\n      ],\n      defaultExpression: null,\n      saveExpression: [\n        {\n          data: [null],\n          conditon_type: '',\n          conditon_type_value: '',\n          conditon_deviceName: '',\n          conditon_deviceName_value: '',\n        }\n      ], // 保存提交数据的表达式\n      callbackItemDefinitions: [], // 保存后台返回的数据\n    }\n  }\n  componentDidMount() {\n    const id = getUrlParams('id');\n    if (id) {\n      /*\n       * 后端返回如下数据\n       const metricLibraryItemDefinitions = [\n         [\n           {\n            \"deleted\": 0,\n            \"conditonType\": 2,\n            \"conditonValue\": \"2,1,3,4\",\n            \"definitionOrder\": 0,\n            \"definition\": \"(sum([60002_1002])+avg([60002_1003]))&&(max([60002_1004])-min([60002_1005]))*(sum([60002_1002]))/(avg([60002_1003]))==count([60002_1004])\"\n            id: 1\n           },\n           {\n            \"deleted\": 0,\n            \"conditonType\": 2,\n            \"conditonValue\": \"2,1,3,4\",\n            \"definitionOrder\": 1,\n            \"definition\": \"((min([60002_1002])+count([60002_1003]))>=(avg([60002_1004])-max([60002_1005])))||(sum([60002_1002])*avg([60002_1003]))!=max([60002_1004])\"\n             id: 2\n           }\n         ],\n         [\n           {\n             \"deleted\": 0,\n             \"conditonType\": 2,\n             \"conditonValue\": \"1,2\",\n             \"definitionOrder\": 2,\n             \"definition\": \"(sum([60002_1002])+max([60002_1003]))<=(avg([60002_1004])-sum([60002_1005]))==count([1122333])\"\n             id: 3\n           }\n         ]\n       ];\n      */\n     const metricLibraryItemDefinitions = [\n        [\n          {\n            \"deleted\": 0,\n            \"conditonType\": 2,\n            \"conditonValue\": \"2,1,3,4\",\n            \"definitionOrder\": 0,\n            \"conditonValueName\": '测试2, 测试1, 测试3, 测试4',\n            \"definition\": \"(sum([60002_1002])+avg([60002_1003]))&&(max([60002_1004])-min([60002_1005]))*(sum([60002_1002]))/(avg([60002_1003]))==count([60002_1004])\",\n            id: 1\n          },\n          {\n            \"deleted\": 0,\n            \"conditonType\": 2,\n            \"conditonValue\": \"2,1,3,4\",\n            \"definitionOrder\": 1,\n            \"conditonValueName\": '测试2, 测试1, 测试3, 测试4',\n            \"definition\": \"((min([60002_1002])+count([60002_1003]))>=(avg([60002_1004])-max([60002_1005])))||(sum([60002_1002])*avg([60002_1003]))!=max([60002_1004])\",\n            id: 2\n          }\n        ],\n        [\n          {\n            \"deleted\": 0,\n            \"conditonType\": 2,\n            \"conditonValue\": \"1,2\",\n            \"conditonValueName\": '测试1,测试2',\n            \"definitionOrder\": 2,\n            \"definition\": \"(sum([60002_1002])+max([60002_1003]))<=(avg([60002_1004])-sum([60002_1005]))==count([1122333])\",\n            id: 3\n          }\n        ]\n      ];\n      if (metricLibraryItemDefinitions && metricLibraryItemDefinitions.length) {\n        const arrs = [];\n        Parse(metricLibraryItemDefinitions, customMetricItems).then(res => {\n          const { definitions } = res;\n          definitions && definitions.length && definitions.forEach(item => {\n            arrs.push({\n              data: item,\n              conditon_type_value: item[0].conditonType,\n              conditon_deviceName_value: item[0].conditonValue,\n              conditon_deviceName: item[0].conditonValueName\n            });\n          });\n          this.setState({\n            expression: arrs,\n            saveExpression: _.cloneDeep(arrs),\n            defaultExpression: null,\n            callbackItemDefinitions: _.cloneDeep(metricLibraryItemDefinitions),\n          });\n        });\n      }\n    }\n  }\n  // 新增或操作\n  handleAddMonitor = () => {\n    console.log('----向上或向下----', this.state);\n    const { defaultExpression } = this.state;\n    this.state.expression.push({\n      data: [_.cloneDeep(defaultExpression)],\n      conditon_type: '',\n      conditon_type_value: '',\n      conditon_deviceName: '',\n      conditon_deviceName_value: '',\n    });\n    this.state.saveExpression.push({\n      data: [_.cloneDeep(defaultExpression)],\n      conditon_type: '',\n      conditon_type_value: '',\n      conditon_deviceName: '',\n      conditon_deviceName_value: ''\n    });\n    \n    this.setState({\n      expression: this.state.expression,\n      saveExpression: this.state.saveExpression,\n    });\n  }\n  // 子组件调用父组件的方法\n  parentHandler = (expression, saveExpression) => {\n    this.setState({\n      expression: _.cloneDeep(expression),\n      saveExpression: _.cloneDeep(saveExpression)\n    });\n  }\n  retExpressionFunc = () => {\n    const { saveExpression } = this.state;\n    const metricLibraryItemDefinitions = [];\n    /*\n     * 后端开发需要如下表达式的值\n     * const metricLibraryItemDefinitions = [\n     *   {\n     *     id: '', // 新增时为null\n     *     gmt_create: '', // 创建时间\n     *     gmt_modified: '', // 修改时间\n     *     definition: '', // 指标库计算表达式\n     *     deleted: '', // 是否是删除，如果新增页面传递 0，如果是修改页面，开发返回原有的数据，就传递时间戳\n     *     conditon_type: '', // 设备类型，默认是：1， 设备类型为：2\n     *     conditon_value: '', // 判断值，如果为默认的话，值为空，否则的话，多个值使用逗号隔开。\n     *     definition_order: '', 表达式优先级顺序，0 是最高，以此类推。。。。\n     *   }\n     * ];\n    */\n     if (saveExpression && saveExpression.length) {\n       let num = -1;\n       for (let j = 0, jlen = saveExpression.length; j < jlen; j++) {\n         const { data } = saveExpression[j];\n         if (data && data.length) {\n           for (let k = 0, klen = data.length; k < klen; k++) {\n              if (data[k] && !data[k].isAlreadyRemove) {\n                num++;\n                metricLibraryItemDefinitions.push({\n                  id: data[k] && data[k].id || null,\n                  deleted: data[k] && data[k].deleted || 0,\n                  conditonType: saveExpression[j] && saveExpression[j].conditon_type_value,\n                  conditonValue: saveExpression[j] && saveExpression[j].conditon_deviceName_value,\n                  definitionOrder: num,\n                  definition: data[k] && !data[k].deleted ? data[k] && replaceDefinition(ast2Str(data[k])) : (data[k] && data[k].conditionDefinition || ''),\n                });\n              }\n           }\n         }\n       }\n     }\n     return metricLibraryItemDefinitions;\n  }\n  handleSubmit = () => {\n    console.log('----handleSubmit---');\n    console.log(this.state);\n    const { callbackItemDefinitions } = this.state;\n    let expressObj = this.retExpressionFunc();\n\n    if (expressObj && expressObj.length < 1) {\n      Feedback.toast.show({\n        type: 'error',\n        content: '表达式必须填写一项'\n      })\n      return;\n    }\n    const flag = validatorFunc(expressObj);\n    if (!flag) {\n      return;\n    }\n    const callbackItems = callbackItemDefinitions && callbackItemDefinitions.length && callbackItemDefinitions.reduce((a, b) => {\n      return a.concat(b);\n    });\n    // 遍历数组，看新提交的数据 和 返回接口的数据是否相同，不相同说明该数据已经被删除了，需要传给开发\n    let newArrs = [];\n    expressObj.forEach(item => {\n      newArrs.push(item.id);\n    });\n    for (let y = 0; y < callbackItems.length; y++) {\n      const yId = callbackItems[y].id;\n      if (newArrs.indexOf(yId) === -1) {\n        expressObj.push({\n          id: yId,\n          deleted: (new Date()).getTime(),\n          isAlreadyRemove: true,\n          conditonType: callbackItems[y].conditonType,\n          conditonValue: callbackItems[y].conditonValue,\n          definition: callbackItems[y].definition,\n          definitionOrder: callbackItems[y].definitionOrder,\n          gmtCreate: callbackItems[y].gmtCreate\n        })\n      }\n    }\n    console.log('----expressObj---新返回回来的---', expressObj);\n  }\n  render() {\n    const { expression, saveExpression, callbackItemDefinitions } = this.state;\n    return (\n      <div>\n        <DragDropContextProvider backend={HTML5Backend}>\n          <div>\n            <DeviceTypeNodes\n              sourceName=\"label\"\n              fromIt={false}\n              deviceType={undefined}\n              subjectType={undefined}\n            >\n            </DeviceTypeNodes>\n            <div className=\"config-context\">\n              <Button type=\"primary\" className=\"new-add-or-btn\" onClick={this.handleAddMonitor}>\n                新增表达式\n              </Button>\n              <div className=\"local-expression\">\n                <MonitorItemExpression \n                  expressionItem = { expression }\n                  parentHandler = { this.parentHandler }\n                  saveExpression = { saveExpression }\n                  callbackItemDefinitions = { callbackItemDefinitions }\n                />\n              </div>\n              <Button type=\"primary\" onClick={this.handleSubmit} style={{ marginTop: '20px', marginLeft: '45%'}}>保存</Button>\n            </div>\n          </div>\n        </DragDropContextProvider>\n        \n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport '@assets/css/app.less';\nimport Home from './home/Home';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n","module.exports = (__webpack_require__(33))(21);"],"mappingsvJA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/CA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AATA;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAbA;AAeA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;;AChBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AA5CA;AA+CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AA5CA;AAjDA;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AA7DA;AA8DA;AACA;AAAA;AAEA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA9FA;AA+FA;AACA;AADA;AAGA;AACA;AAnGA;AAoGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzGA;AA2GA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAhHA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAmGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAQA;AACA;AAtIA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AApBA;;ACXA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA3CA;AA8CA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAPA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAvBA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AA7BA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AApBA;;;;;;;;;;ACfA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAbA;;;;;;;ACHA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAiCA;AACA;AAAA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApDA;AAqDA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAbA;AAcA;AAxBA;AACA;AAtDA;AAgFA;AACA;AACA;AAAA;AACA;AACA;AApFA;AAsFA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA7FA;AA+FA;AACA;AACA;AA9FA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAmEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAnHA;AACA;AAoHA;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAHA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAHA;AALA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlCA;AACA;AAmCA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AA5oBA;;ACdA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;;;;;ACtBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AASA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAIA;AADA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAXA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AApBA;AAsBA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAkEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA3EA;AAkNA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlOA;AAoOA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvPA;AA2PA;AACA;AA1PA;AACA;AAwEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4CA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAxVA;;;;;ACphHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAsHA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AA5IA;AA8IA;AACA;AACA;AAFA;AAIA;AACA;AAnJA;AAoJA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5LA;AA6LA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAAA;AACA;AACA;AApOA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AArBA;AAsBA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAiHA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAxQA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAXA;AACA;AAYA;;ACjBA;AACA;AACA;AAEA;;;;;;;ACJA;;;;A","sourceRoot":""}